{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./Reducers/rootReducer\";\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    if (state.page.posts) {\n      nextState.page = state.page; // preserve client value on client side navigation\n    }\n\n    return nextState;\n  } else {\n    return rootReducer(state, action);\n  }\n};\n\nconst initStore = () => {\n  return createStore(reducer, bindMiddleware([thunkMiddleware]));\n};\n\nexport const wrapper = createWrapper(initStore);","map":{"version":3,"sources":["/home/mustkeem/Documents/personal/development/techBlog/Store/store.js"],"names":["createStore","applyMiddleware","combineReducers","HYDRATE","createWrapper","thunkMiddleware","rootReducer","bindMiddleware","middleware","composeWithDevTools","require","reducer","state","action","type","nextState","payload","page","posts","initStore","wrapper"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACR,eAAe,CAAC,GAAGO,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOP,eAAe,CAAC,GAAGO,UAAJ,CAAtB;AACD,CAND;;AAQA,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,MAAIA,MAAM,CAACC,IAAP,KAAgBX,OAApB,EAA6B;AAC3B,UAAMY,SAAS,mCACVH,KADU,GAEVC,MAAM,CAACG,OAFG,CAAf;;AAIA,QAAIJ,KAAK,CAACK,IAAN,CAAWC,KAAf,EAAqB;AACnBH,MAAAA,SAAS,CAACE,IAAV,GAAiBL,KAAK,CAACK,IAAvB,CADmB,CACU;AAC9B;;AACD,WAAOF,SAAP;AACD,GATD,MASO;AACL,WAAOT,WAAW,CAACM,KAAD,EAAQC,MAAR,CAAlB;AACD;AACF,CAbD;;AAeA,MAAMM,SAAS,GAAG,MAAM;AACtB,SAAOnB,WAAW,CAACW,OAAD,EAAUJ,cAAc,CAAC,CAACF,eAAD,CAAD,CAAxB,CAAlB;AACD,CAFD;;AAIA,OAAO,MAAMe,OAAO,GAAGhB,aAAa,CAACe,SAAD,CAA7B","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport rootReducer from \"./Reducers/rootReducer\";\r\n\r\nconst bindMiddleware = (middleware) => {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  if (action.type === HYDRATE) {\r\n    const nextState = {\r\n      ...state, // use previous state\r\n      ...action.payload, // apply delta from hydration\r\n    };\r\n    if (state.page.posts){\r\n      nextState.page = state.page; // preserve client value on client side navigation\r\n    } \r\n    return nextState;\r\n  } else {\r\n    return rootReducer(state, action);\r\n  }\r\n};\r\n\r\nconst initStore = () => {\r\n  return createStore(reducer, bindMiddleware([thunkMiddleware]));\r\n};\r\n\r\nexport const wrapper = createWrapper(initStore);\r\n"]},"metadata":{},"sourceType":"module"}