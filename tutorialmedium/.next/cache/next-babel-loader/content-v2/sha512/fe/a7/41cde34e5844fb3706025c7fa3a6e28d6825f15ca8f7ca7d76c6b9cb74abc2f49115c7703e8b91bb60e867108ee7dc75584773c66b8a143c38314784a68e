{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mustkeem/Documents/My Projects/all-projects/codemedium/codemedium-frontend/tutorialmedium/pages/[slug].js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\"; // import PostComponent from \"../Components/PostPage\";\n\nimport { wrapper as storeWrapper } from \"../Store/store\";\nimport { getPost2 } from \"../Store/Actions/actions\";\nimport { API_URL } from \"../config\";\n\nfunction PostPage({\n  products\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    products: products,\n    children: \"test \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n} // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/feed/posts\"\n  }).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    return error;\n  });\n  const posts = await res.posts; // Get the paths we want to pre-render based on posts\n\n  const paths = [];\n  posts.forEach(post => {\n    paths.push({\n      params: {\n        slug: post.slug\n      }\n    });\n  });\n  console.log(\"testeeeeeeeeee\", paths); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   const res = await axios({\n//     method: \"get\",\n//     url: API_URL + \"/feed/products\",\n//     params: {\n//       category_slug: params.tag,\n//     },\n//   })\n//     .then(function (response) {\n//       return response.data;\n//     })\n//     .catch(function (error) {\n//       return error;\n//     });\n//   const products = await res.products;\n//   // Pass post data to the page via props\n//   return { props: { products } };\n// }\n\nexport const getStaticProps = storeWrapper.getStaticProps(async ({\n  params,\n  store\n}) => {\n  var _store$getState$produ;\n\n  //   await store.dispatch(\n  //     productsApis.fetchProducts({\n  //       category_slug: params.tag,\n  //     })\n  //   );\n  return {\n    props: {\n      products: (_store$getState$produ = store.getState().products.fetchProducts.data) === null || _store$getState$produ === void 0 ? void 0 : _store$getState$produ.products\n    }\n  };\n});\n\nconst mapStateToprops = state => {\n  var _state$products$fetch;\n\n  return {\n    products: (_state$products$fetch = state.products.fetchProducts.data) === null || _state$products$fetch === void 0 ? void 0 : _state$products$fetch.products\n  };\n};\n\nexport default connect(mapStateToprops)(PostPage);","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/codemedium/codemedium-frontend/tutorialmedium/pages/[slug].js"],"names":["React","axios","connect","wrapper","storeWrapper","getPost2","API_URL","PostPage","products","getStaticPaths","res","method","url","then","response","data","catch","error","posts","paths","forEach","post","push","params","slug","console","log","fallback","getStaticProps","store","props","getState","fetchProducts","mapStateToprops","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AAEA,SAASC,OAAO,IAAIC,YAApB,QAAwC,gBAAxC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,SAASC,OAAT,QAAwB,WAAxB;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B,sBAAO;AAAK,IAAA,QAAQ,EAAEA,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMT,KAAK,CAAC;AACpBU,IAAAA,MAAM,EAAE,KADY;AAEpBC,IAAAA,GAAG,EAAEN,OAAO,GAAG;AAFK,GAAD,CAAL,CAIbO,IAJa,CAIR,UAAUC,QAAV,EAAoB;AACxB,WAAOA,QAAQ,CAACC,IAAhB;AACD,GANa,EAObC,KAPa,CAOP,UAAUC,KAAV,EAAiB;AACtB,WAAOA,KAAP;AACD,GATa,CAAlB;AAWI,QAAMC,KAAK,GAAE,MAAMR,GAAG,CAACQ,KAAvB,CAbiC,CAgBrC;;AACA,QAAMC,KAAK,GAAG,EAAd;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAeC,IAAD,IAAU;AACpBF,IAAAA,KAAK,CAACG,IAAN,CAAW;AACTC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAI,EAAEH,IAAI,CAACG;AAAb;AADC,KAAX;AAGH,GAJD;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BP,KAA9B,EAxBqC,CA2BrC;AACA;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASQ,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAGxB,YAAY,CAACwB,cAAb,CAA4B,OAAO;AAAEL,EAAAA,MAAF;AAAUM,EAAAA;AAAV,CAAP,KAA6B;AAAA;;AACvF;AACA;AACA;AACA;AACA;AAEE,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAAEtB,MAAAA,QAAQ,2BAAEqB,KAAK,CAACE,QAAN,GAAiBvB,QAAjB,CAA0BwB,aAA1B,CAAwCjB,IAA1C,0DAAE,sBAA8CP;AAA1D;AAAT,GAAP;AACD,CAR6B,CAAvB;;AAUP,MAAMyB,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,SAAO;AACL1B,IAAAA,QAAQ,2BAAE0B,KAAK,CAAC1B,QAAN,CAAewB,aAAf,CAA6BjB,IAA/B,0DAAE,sBAAmCP;AADxC,GAAP;AAGD,CAJD;;AAMA,eAAeN,OAAO,CAAC+B,eAAD,CAAP,CAAyB1B,QAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\n\n// import PostComponent from \"../Components/PostPage\";\n\nimport { wrapper as storeWrapper } from \"../Store/store\";\nimport { getPost2 } from \"../Store/Actions/actions\";\n\nimport { API_URL } from \"../config\";\n\nfunction PostPage({ products }) {\n  return <div products={products} >test </div>;\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios({\n      method: \"get\",\n      url: API_URL + \"/feed/posts\",\n    })\n      .then(function (response) {\n        return response.data;\n      })\n      .catch(function (error) {\n        return error;\n      });\n\n      const posts= await res.posts;\n\n\n  // Get the paths we want to pre-render based on posts\n  const paths = [];\n  posts.forEach((post) => {\n      paths.push({\n        params: { slug: post.slug },\n      });\n  });\n\n  console.log(\"testeeeeeeeeee\", paths);\n\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n}\n\n// This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   const res = await axios({\n//     method: \"get\",\n//     url: API_URL + \"/feed/products\",\n//     params: {\n//       category_slug: params.tag,\n//     },\n//   })\n//     .then(function (response) {\n//       return response.data;\n//     })\n//     .catch(function (error) {\n//       return error;\n//     });\n//   const products = await res.products;\n\n//   // Pass post data to the page via props\n//   return { props: { products } };\n// }\n\nexport const getStaticProps = storeWrapper.getStaticProps(async ({ params, store }) => {\n//   await store.dispatch(\n//     productsApis.fetchProducts({\n//       category_slug: params.tag,\n//     })\n//   );\n\n  return { props: { products: store.getState().products.fetchProducts.data?.products } };\n});\n\nconst mapStateToprops = (state) => {\n  return {\n    products: state.products.fetchProducts.data?.products,\n  };\n};\n\nexport default connect(mapStateToprops)(PostPage);"]},"metadata":{},"sourceType":"module"}