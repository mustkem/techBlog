{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { connect } from \"react-redux\";\nimport Head from \"next/head\";\nimport HomeComponent from \"../../Components/Home\";\nimport { wrapper as storeWrapper } from \"../../Store/store\";\nimport * as homeActions from \"../../Store/Actions/actions\";\n\nfunction Home({\n  posts\n}) {\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"Learn Javascript, React, Best Practice Javascript, Best Practice React\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"Description\",\n        content: \"Learn Javascript, React, Best Practice Javascript, Best Practice React\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"Keywords\",\n        content: \"Javascript, React, Learn, Tutorial, Tutorials, Learning, Training, HTML, CSS, Code, Example, Examples, Medium\"\n      })]\n    }), /*#__PURE__*/_jsx(HomeComponent, {\n      posts: posts\n    })]\n  });\n} // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  // Get the paths we want to pre-render based on posts\n  const paths = [{\n    params: {\n      category: \"javascript\"\n    }\n  }, {\n    params: {\n      category: \"react\"\n    }\n  }]; // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport const getStaticProps = storeWrapper.getStaticProps(async ({\n  params,\n  store\n}) => {\n  console.log(\"test--------------\", params);\n  await store.dispatch(homeActions.getPosts2({\n    category: params.category\n  }));\n  return {\n    props: {}\n  };\n});\n\nconst mapStateToprops = state => {\n  return {\n    posts: state.page.posts\n  };\n};\n\nexport default connect(mapStateToprops)(Home);","map":null,"metadata":{},"sourceType":"module"}