{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { withRouter } from \"next/router\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { API_URL } from \"../../config\";\nimport { loginAction } from \"../../Store/Actions/actions\";\nimport AdminPosts from \"./Home/Home\";\nimport LoginAdmin from \"./Login\";\nimport PostDetail from \"./PostDetail/PostDetail\";\nimport CreatePost from \"./CreatePost\";\n\nfunction Admin(props) {\n  const [isValid, setIsValid] = React.useState(true);\n  React.useEffect(() => {\n    return axios({\n      method: \"get\",\n      url: API_URL + \"/admin/auth/status\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"codemedium-token-admin\")\n      }\n    }).then(function (response) {\n      setIsValid(true);\n      props.loginAction(response.data.user);\n      return response.data;\n    }).catch(function (error) {\n      setIsValid(false);\n      history.push(\"/admin\");\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(Switch, {\n      children: /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: path,\n        children: /*#__PURE__*/_jsx(LoginAdmin, {})\n      })\n    }), /*#__PURE__*/_jsxs(Switch, {\n      children: [/*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: `${path}/add/post`,\n        component: CreatePost\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: `${path}/posts/home`,\n        children: /*#__PURE__*/_jsx(AdminPosts, {})\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: `${path}/:postId`,\n        children: /*#__PURE__*/_jsx(PostDetail, {})\n      })]\n    })]\n  });\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loginAction: payload => dispatch(loginAction(payload))\n  };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(Admin));","map":null,"metadata":{},"sourceType":"module"}