{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mustkeem/Documents/My Projects/all-projects/codemedium/codemedium-frontend/pages/post/[slug].js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport Head from \"next/head\";\nimport PostComponent from \"../../Components/PostPage\";\nimport { wrapper as storeWrapper } from \"../../Store/store\";\nimport { getPost2 } from \"../../Store/Actions/actions\";\nimport { API_URL } from \"../../config\";\n\nfunction PostPage({\n  post\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"Description\",\n        content: post.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostComponent, {\n      post: post\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n} // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/feed/posts\"\n  }).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    return error;\n  });\n  const posts = await res.posts; // Get the paths we want to pre-render based on posts\n\n  const paths = [];\n  posts.forEach(post => {\n    paths.push({\n      params: {\n        slug: post.slug\n      }\n    });\n  }); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport const getStaticProps = storeWrapper.getStaticProps(async ({\n  params,\n  store\n}) => {\n  await store.dispatch(getPost2(params.slug));\n  return {\n    props: {\n      post: store.getState().page.post\n    }\n  };\n});\n\nconst mapStateToprops = state => {\n  return {\n    products: state.page.post\n  };\n};\n\nexport default connect(mapStateToprops)(PostPage);","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/codemedium/codemedium-frontend/pages/post/[slug].js"],"names":["React","axios","connect","Head","PostComponent","wrapper","storeWrapper","getPost2","API_URL","PostPage","post","title","desc","getStaticPaths","res","method","url","then","response","data","catch","error","posts","paths","forEach","push","params","slug","fallback","getStaticProps","store","dispatch","props","getState","page","mapStateToprops","state","products"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,aAAP,MAA0B,2BAA1B;AAEA,SAASC,OAAO,IAAIC,YAApB,QAAwC,mBAAxC;AACA,SAASC,QAAT,QAAyB,6BAAzB;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA4B;AAC1B,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,IAAI,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAED,IAAI,CAACE;AAAvC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEF;AAArB;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,C,CAED;;;AACA,OAAO,eAAeG,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMb,KAAK,CAAC;AACtBc,IAAAA,MAAM,EAAE,KADc;AAEtBC,IAAAA,GAAG,EAAER,OAAO,GAAG;AAFO,GAAD,CAAL,CAIfS,IAJe,CAIV,UAAUC,QAAV,EAAoB;AACxB,WAAOA,QAAQ,CAACC,IAAhB;AACD,GANe,EAOfC,KAPe,CAOT,UAAUC,KAAV,EAAiB;AACtB,WAAOA,KAAP;AACD,GATe,CAAlB;AAWA,QAAMC,KAAK,GAAG,MAAMR,GAAG,CAACQ,KAAxB,CAbqC,CAerC;;AACA,QAAMC,KAAK,GAAG,EAAd;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAed,IAAD,IAAU;AACtBa,IAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAI,EAAEjB,IAAI,CAACiB;AAAb;AADC,KAAX;AAGD,GAJD,EAjBqC,CAuBrC;AACA;;AACA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,MAAMC,cAAc,GAAGvB,YAAY,CAACuB,cAAb,CAC5B,OAAO;AAAEH,EAAAA,MAAF;AAAUI,EAAAA;AAAV,CAAP,KAA6B;AAC3B,QAAMA,KAAK,CAACC,QAAN,CAAexB,QAAQ,CAACmB,MAAM,CAACC,IAAR,CAAvB,CAAN;AAEA,SAAO;AAAEK,IAAAA,KAAK,EAAE;AAAEtB,MAAAA,IAAI,EAAEoB,KAAK,CAACG,QAAN,GAAiBC,IAAjB,CAAsBxB;AAA9B;AAAT,GAAP;AACD,CAL2B,CAAvB;;AAQP,MAAMyB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,QAAQ,EAAED,KAAK,CAACF,IAAN,CAAWxB;AADhB,GAAP;AAGD,CAJD;;AAMA,eAAeR,OAAO,CAACiC,eAAD,CAAP,CAAyB1B,QAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport Head from \"next/head\";\n\nimport PostComponent from \"../../Components/PostPage\";\n\nimport { wrapper as storeWrapper } from \"../../Store/store\";\nimport { getPost2 } from \"../../Store/Actions/actions\";\n\nimport { API_URL } from \"../../config\";\n\nfunction PostPage({ post }) {\n  return (\n    <div>\n      <Head>\n        <title>{post.title}</title>\n        <meta name=\"Description\" content={post.desc} />\n      </Head>\n      <PostComponent post={post} />\n    </div>\n  );\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/feed/posts\",\n  })\n    .then(function (response) {\n      return response.data;\n    })\n    .catch(function (error) {\n      return error;\n    });\n\n  const posts = await res.posts;\n\n  // Get the paths we want to pre-render based on posts\n  const paths = [];\n  posts.forEach((post) => {\n    paths.push({\n      params: { slug: post.slug },\n    });\n  });\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n}\n\nexport const getStaticProps = storeWrapper.getStaticProps(\n  async ({ params, store }) => {\n    await store.dispatch(getPost2(params.slug));\n\n    return { props: { post: store.getState().page.post } };\n  }\n);\n\nconst mapStateToprops = (state) => {\n  return {\n    products: state.page.post,\n  };\n};\n\nexport default connect(mapStateToprops)(PostPage);\n"]},"metadata":{},"sourceType":"module"}