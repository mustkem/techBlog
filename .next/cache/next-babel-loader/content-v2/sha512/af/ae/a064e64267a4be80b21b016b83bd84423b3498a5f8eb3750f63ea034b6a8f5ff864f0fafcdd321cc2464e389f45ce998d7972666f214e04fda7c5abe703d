{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mustkeem/Documents/My Projects/all-projects/codemedium/codemedium-frontend/Components/admin/Admin.js\";\nimport React from \"react\";\nimport { BrowserRouter, Switch, Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { API_URL } from \"../../config\";\nimport { loginAction } from \"../../Store/Actions/actions\";\nimport AdminPosts from \"./Home/Home\";\nimport LoginAdmin from \"./Login\";\nimport PostDetail from \"./PostDetail/PostDetail\";\nimport CreatePost from \"./CreatePost\";\n\nfunction Admin(props) {\n  let {\n    path,\n    url\n  } = useRouteMatch();\n  const history = useHistory();\n  const [isValid, setIsValid] = React.useState(true);\n  React.useEffect(() => {\n    return axios({\n      method: \"get\",\n      url: API_URL + \"/admin/auth/status\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"codemedium-token-admin\")\n      }\n    }).then(function (response) {\n      setIsValid(true);\n      props.loginAction(response.data.user);\n      return response.data;\n    }).catch(function (error) {\n      setIsValid(false);\n      history.push(\"/admin\");\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: path,\n        children: /*#__PURE__*/_jsxDEV(LoginAdmin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/add/post`,\n        component: CreatePost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/posts/home`,\n        children: /*#__PURE__*/_jsxDEV(AdminPosts, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/:postId`,\n        children: /*#__PURE__*/_jsxDEV(PostDetail, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loginAction: payload => dispatch(loginAction(payload))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Admin);","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/codemedium/codemedium-frontend/Components/admin/Admin.js"],"names":["React","BrowserRouter","Switch","Route","useParams","useRouteMatch","useHistory","axios","connect","API_URL","loginAction","AdminPosts","LoginAdmin","PostDetail","CreatePost","Admin","props","path","url","history","isValid","setIsValid","useState","useEffect","method","headers","Authorization","localStorage","getItem","then","response","data","user","catch","error","push","console","log","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\n\nimport { API_URL } from \"../../config\";\nimport { loginAction } from \"../../Store/Actions/actions\";\n\nimport AdminPosts from \"./Home/Home\";\nimport LoginAdmin from \"./Login\";\nimport PostDetail from \"./PostDetail/PostDetail\";\nimport CreatePost from \"./CreatePost\";\n\nfunction Admin(props) {\n  let { path, url } = useRouteMatch();\n  const history = useHistory();\n\n  const [isValid, setIsValid] = React.useState(true);\n\n  React.useEffect(() => {\n    return axios({\n      method: \"get\",\n      url: API_URL + \"/admin/auth/status\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization:\n          \"Bearer \" + localStorage.getItem(\"codemedium-token-admin\"),\n      },\n    })\n      .then(function (response) {\n        setIsValid(true);\n        props.loginAction(response.data.user);\n        return response.data;\n      })\n      .catch(function (error) {\n        setIsValid(false);\n        history.push(\"/admin\");\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <div>\n      <Switch>\n        <Route exact path={path}>\n          <LoginAdmin />\n        </Route>\n      </Switch>\n      {/* {isValid && ( */}\n      <Switch>\n        <Route exact path={`${path}/add/post`} component={CreatePost} />\n        <Route exact path={`${path}/posts/home`}>\n          <AdminPosts />\n        </Route>\n        <Route exact path={`${path}/:postId`}>\n          <PostDetail />\n        </Route>\n      </Switch>\n      {/* )} */}\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loginAction: (payload) => dispatch(loginAction(payload)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Admin);\n"]},"metadata":{},"sourceType":"module"}